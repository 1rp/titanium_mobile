#!/usr/bin/python
import os, sys, platform, glob, shutil, time
Import("env cwd version")

sys.path.append(os.path.join(cwd, "support", "android"))
from androidsdk import AndroidSDK

#TODO detect these
modules = ['accelerometer', 'analytics', 'api', 'app', 'database', 'filesystem', 'geolocation', 'json', 'media', 'xml', 'network', 'platform', 'ui', 'gesture', 'utils', 'map' ]

print "Building Titanium Mobile (Android) %s..." % version

sdk = AndroidSDK(ARGUMENTS.get("android_sdk", None), 4)
android_dir = sdk.get_platform_dir()
google_apis = sdk.get_google_apis_dir()

if android_dir is None or not os.path.exists(android_dir):
	print >>sys.stderr, 'Error: Android 1.6 directory not found, try specifying with android_sdk=</path/to/sdk>'
	sys.exit(-1)
if google_apis is None or not os.path.exists(google_apis):
	print >>sys.stderr, 'Error: Google APIs v4 not found'
	sys.exit(-1)

classpath = [ sdk.get_android_jar(), sdk.get_maps_jar() ]
sources = [os.path.join('titanium', 'src'), os.path.join('titanium', 'thirdparty')]

titanium_src_dir = os.path.join(cwd, 'android', 'titanium', 'src')
classes_dir = os.path.join(cwd, 'dist', 'android', 'classes')

#write the build info to a properties file that can be read at runtime
timestamp = time.asctime()
f = open(os.path.join(titanium_src_dir, 'org', 'appcelerator', 'titanium', 'build.properties'), 'w+')
f.write("""
# WARNING: generated by Titanium
build.version=%(version)s
build.timestamp=%(timestamp)s
""" % { 'version': version, 'timestamp': timestamp })
f.close()

#copy non-Java files into classes
def copy_resources(src_dir, dest_dir):
	resources = []
	for root, dirs, files in os.walk(src_dir):
		for file in files:
			if not file.endswith(".java"):
				relative_path = os.path.join(root[len(src_dir)+1:], file)
				file_path = os.path.join(root, file)
				dest_path = os.path.join(dest_dir, os.path.dirname(relative_path))
				if not os.path.exists(dest_path):
					os.makedirs(dest_path)
				dest_file = os.path.join(dest_dir, relative_path)
				shutil.copy(file_path, dest_file)
				resources.append(dest_file)
	return resources

def list_jars(dir):
	jars = []
	if os.path.exists(dir):
		for jar in os.listdir(dir):
			if jar.endswith('.jar'): jars.append(os.path.join(dir, jar))
	return jars


classpath += list_jars(os.path.join(cwd, 'android', 'titanium', 'lib'))
if platform.system() == "Windows":
	# take javac from JAVA_HOME, scons has bad detection code in windows
	if "JAVA_HOME" in os.environ:
		env["JAVAC"] = os.path.join(os.environ["JAVA_HOME"], "bin", "javac.exe")
		env["JAR"] = os.path.join(os.environ["JAVA_HOME"], "bin", "jar.exe")

env.Append(JAVASOURCEPATH=os.path.join('titanium', 'src'))
env.Append(JAVACLASSPATH=classpath)

classes = env.Java(target = 'classes', source = sources)
env.Jar(target = 'titanium.jar', source = classes + copy_resources(titanium_src_dir, classes_dir))
titanium_jar = os.path.join(cwd, 'dist', 'android', 'titanium.jar')

classpath.append(titanium_jar)
for module in modules:
	classpath.append(os.path.join(classes_dir, module))

#ensure build order
last_jar = titanium_jar
for module in modules:
	module_sources = os.path.join('modules', module, 'src')
	module_jars = list_jars(os.path.join(cwd, 'android', 'modules', module, 'lib'))
	module_classes = env.Java(target = 'classes/%s' % module, source = module_sources, JAVACLASSPATH = classpath + module_jars + [classes_dir])
	module_classes_dir = os.path.join(classes_dir, module)
	env.Depends(module_classes, last_jar)
	module_classes = [ os.path.join('classes', module) ]
	copy_resources(os.path.join(cwd, 'android', 'modules', module, 'src'), module_classes_dir)
	env.Jar(target = 'titanium-%s.jar' % module,
		source = module_classes, JARCHDIR=module_classes_dir)
	last_jar = os.path.join(cwd, 'dist', 'android', 'titanium-%s.jar' % module)

