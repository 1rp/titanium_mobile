#!/usr/bin/env python
#
# Scons script for building the iphone library
#
import os,platform,sys,urllib,gzip
from progressbar import ProgressBar

ticore_version = '1'

libname = 'libTiCore-%s.a' % ticore_version
thirdparty_name = '%s.gz' % libname
libfile = 'lib/%s' % libname
outfile = 'lib/libTiCore.a'
markerfile = 'lib/%s.txt' % ticore_version
url = 'http://timobile.appcelerator.com.s3.amazonaws.com/%s' % (thirdparty_name)

try:
	# pull in the version from the top-level SConstruct
	Import('version')
except:
	if ARGUMENTS.get('PRODUCT_VERSION', 0):
		version = ARGUMENTS['PRODUCT_VERSION']
	else:
		version = '0.0.0'

defines='TI_VERSION=%s ' % version

config = 'Release'

flags = ''

if ARGUMENTS.get('COMPILER_FLAGS', 0):
	flags = ARGUMENTS.get('COMPILER_FLAGS')


iphone_dir = os.path.abspath(os.path.join(os.path.dirname(sys._getframe(0).f_code.co_filename),'../','support','iphone'))
sys.path.append(iphone_dir)

import run,prereq

def fetch():
	print "You don't seem to have the appropriate thirdparty files. I'll fetch them."
	print "This could take awhile.. Might want to grab a cup of Joe or make fun of Nolan."
	print "Downloading %s" % url
 
	pbar = ProgressBar().start()
	try:
		def progress_callback(count, block_size, total_size):
			if (total_size < 0):
				raise Exception("Could not fetch archive! Does it exist on the server?")
			percent = int(count * block_size * 100/total_size)
			pbar.update(percent)
 
		fname, msg = urllib.urlretrieve(url, reporthook=progress_callback)
 
		print "Fetched it (%s). I'm going to unpack it now..." % (fname)
		
		if not os.path.exists('lib'):
			os.makedirs('lib')
		
		ofile = open(outfile,'wb')
		gfile = gzip.open(fname,'rb')
		ofile.write(gfile.read())
		ofile.close()
		gfile.close()
		
		mfile = open(markerfile,'w')
		mfile.write('DO NOT DELETE THIS FILE.')
		mfile.close()
		
	finally:
		urllib.urlcleanup()
		pbar.finish()
	
def build(dir,name,apiversion):
    # execute the phone and simulator release builds

    curdir = os.path.abspath(os.curdir)
    os.chdir(dir)


    if os.path.exists('/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS%s.sdk' % apiversion):
    	output = os.system("xcodebuild -sdk iphoneos%s -project Titanium.xcodeproj -target %s -configuration %s GCC_PREPROCESSOR_DEFINITIONS='%s %s' clean build" % (apiversion,name,config,defines,flags))
	if output!=0:
		sys.exit(output)

    if os.path.exists('/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator%s.sdk' % apiversion):
    	output = os.system("xcodebuild -sdk iphonesimulator%s -project Titanium.xcodeproj -target %s -configuration %s GCC_PREPROCESSOR_DEFINITIONS='DEBUG=1 %s %s' clean build" % (apiversion,name,config,defines,flags))

	if output!=0:
		sys.exit(-1)
	

    # build the merged library using lipo
    os.system("lipo build/%s-iphonesimulator/lib%s.a build/%s-iphoneos/lib%s.a -create -output build/lib%s.a" %(config,name,config,name,name))
   
    os.chdir(curdir)

if not os.path.exists(markerfile):
	fetch()

build('iphone','Titanium','3.1.2')

sys.exit(0)
